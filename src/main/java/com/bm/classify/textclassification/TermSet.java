package com.bm.classify.textclassification;import java.io.Serializable;import java.util.Iterator;import java.util.SortedMap;/** * Repraesentiert eine Menge von Termen (Term, # Haufigkeit). Diese menge kann * zusaetzlich noch eine Gewicht haben Standard ist 1. *  * @author Daniel Wiese * @since 21.07.2006 */public class TermSet implements Serializable {    private static final long serialVersionUID = 1L;    private final SortedMap<String, Integer> map;    private final int weight;    /**     * Constructor.     *      * @param termsAndFrequencies -     *            mit termen und haufigkeiten     */    public TermSet(final SortedMap<String, Integer> termsAndFrequencies) {        this(termsAndFrequencies, 1);    }    /**     * Constructor.     *      * @param termsAndFrequencies -     *            mit termen und haufigkeiten     * @param weight -     *            dieser menge kann ein gewicht zugordnet werden, default ist 1     */    public TermSet(final SortedMap<String, Integer> termsAndFrequencies, int weight) {        this.map = termsAndFrequencies;        this.weight = weight;    }    /**     * Gibt den inhalt des TermSers aus.     *      * @author Daniel Wiese     * @since 21.07.2006     * @return inhalt des TermSets.     */    public SortedMap<String, Integer> getSortedMap() {        return this.map;    }    /**     * Deas gewicht des sets, default ist 1. Damit kann man bestimmetn wie stark     * die SVM auf dieses TermSet achten soll.     *      * @author Daniel Wiese     * @since 21.07.2006     * @return das gewicht.     */    public int getWeight() {        return weight;    }    /**     * Formattiert die ausgabe.     *      * @return - formattirte ausgabe     * @see java.lang.Object#toString()     */    public String toString() {        final Iterator<String> iter = map.keySet().iterator();        final StringBuilder sb = new StringBuilder();        while (iter.hasNext()) {            String entry = iter.next();            sb.append("( ").append(entry).append(" : ").append(map.get(entry)).append(") - ");        }        return sb.toString();    }    /**     * Liefert die anzahl der terme.     *      * @author Daniel Wiese     * @since 21.07.2006     * @return die anzahl der terme.     */    public int size() {        return this.map.size();    }}